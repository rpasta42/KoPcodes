life:
   ida: 0x08049540
   bless: 0x540


B8 04 00 00 00          mov eax, 4
B9 B8 9D 04 08          mov ecx, misc_buffer
BB 01 00 00 00          mov ebx, 1
BA 01 00 00 00          mov edx, 1



5B                      pop ebx
58                      pop eax

50                      push eax
53                      push ebx

CD 80                   int 0x80

89 C0                   mov eax, eax
89 D8                   mov eax, ebx
89 C8                   mov eax, ecx
89 d0                   mov eax, edx

89 C3                   mov ebx, eax
89 DB                   mov ebx, ebx
89 CB                   mov ebx, ecx
89 D3                   mov ebx, edx

B8 00 00 10 00          mov eax, 100000h



66 c7 05 00 10 00 00 04 00          mov WORD [0x1000], 4


===breakdown
https://en.wikibooks.org/wiki/X86_Assembly/Machine_Language_Conversion

B8 = mov eax, xxx
BB = mov ebx, xxx

BB-B8 = 3




instr              gives out    correct
mov ebx, edx         89 D0       89 D3
mov ebx, eax         89 C0       89 C3
mov ebx, ecx         89 C8       89 CB
mov ebx, ebx         89 D8       89 DB




====elf
http://www.skyfree.org/linux/references/ELF_Format.pdf

page 7 PART 1
   page 7
      for order struct order
   p 22
      string table
   p 27
      relocation

page 31 PART 2
   p 33
      program header


elf types
   relocatable file = object file
   executable file = program for execution
   shared object file = ld (link editor) same as dll


============================
;opcodes.f


#define ELF_BASE_LOAD_ADDR 0x8048000

#define ELF_ENTRY_ADDR(n) ((n * sizeof(elf32_program_header_t)
                           + ELF32_HEADER_SIZE
                           + ELF_BASE_LOAD_ADDR)

0x94 	first section offset
	ELF32_HEADER_SIZE + sizeof(elf32_program_header_t)*3

.note_gnu.build-i
	sizeof() = 0x24
	alignment = 4

.text
	text_seg = 0x94 + 0x24 = 0xB8
	0xB8 + 8 (for alignment) = C0



first sect #text
	first_sect_offset: ELF32_HEADER_SIZE + sizeof(elf32_program_header_t)*num_prog_ehader_entries
	first_sect_addr: ELF_BASE_LOAD_ADDR + first_sect_offset

second sect #data
	snd_sect_offset: first_sect_offset + first_sect_addr

program header:
first: LOAD
   FileSize/MemSize = snd_sect_offset + snd_sect_size
snd: LOAD (for data)
   FIleSize/MemSize = if 0, then align

needed sections
.data = initialized program data
.text = executable
.shstrtab = string table with section names
.strtab = string table with symbol table entries
.symtab = symbol table


